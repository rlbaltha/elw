security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
#        app_user_provider:
#            entity:
#                class: App\Entity\User
#                property: username
        cas:
            id: App\Service\ElwUserProvider
    encoders:
        # use your user class name here
        App\Entity\User:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            # (i.e. Sodium when available).
            algorithm: auto
    firewalls:
        lti1p3_message:
            pattern: ^/lti_login$
            stateless: true
            lti1p3_message: true
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
#            anonymous: lazy
#            guard:
#                authenticators:
#                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: index
                success_handler: PRayno\CasAuthBundle\Event\LogoutSuccessHandler
            anonymous: ~
            guard:
                authenticators:
                    - prayno.cas_authenticator
            switch_user: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # User permissions handled in the controller
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/home, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/course, roles: ROLE_USER, requires_channel: https }
        - { path: ^/classlist, roles: ROLE_USER, requires_channel: https }
        - { path: ^/doc, roles: ROLE_USER, requires_channel: https }
        - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
        - { path: ^/labelset, roles: ROLE_INSTRUCTOR, requires_channel: https }
        - { path: ^/label, roles: ROLE_INSTRUCTOR, requires_channel: https }
        - { path: ^/markupset, roles: ROLE_INSTRUCTOR, requires_channel: https }
        - { path: ^/markup, roles: ROLE_INSTRUCTOR, requires_channel: https }
