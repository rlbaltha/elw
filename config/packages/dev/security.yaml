security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  encoders:
    # use your user class name here
    App\Entity\User:
      # Use native password encoder
      # This value auto-selects the best possible hashing algorithm
      # (i.e. Sodium when available).
      algorithm: auto
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      guard:
        authenticators:
          - App\Security\LoginFormAuthenticator
      logout:
        path: /logout
        target: /app_login
      switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/home, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/course, roles: ROLE_USER }
    - { path: ^/classlist, roles: ROLE_USER }
    - { path: ^/doc, roles: ROLE_USER }
    - { path: ^/journal, roles: ROLE_USER}
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/user, roles: ROLE_USER }
    - { path: ^/label, roles: ROLE_ADMIN }
    - { path: ^/markupset, roles: ROLE_INSTRUCTOR }
    - { path: ^/markup, roles: ROLE_INSTRUCTOR }
    - { path: ^/card, roles: ROLE_ADMIN }
    - { path: ^/rubric, roles: ROLE_INSTRUCTOR }


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon