security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      custom_authenticator:
        - App\Security\LocalAuthenticator
        - App\Security\LtiAuthenticator
      logout:
        path: /logout
        target: /login
      switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
    - { path: ^/home, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
    - { path: ^/lti1p3, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
    - { path: ^/course, roles: ROLE_USER, requires_channel: https}
    - { path: ^/journal, roles: ROLE_USER, requires_channel: https}
    - { path: ^/classlist, roles: ROLE_USER, requires_channel: https }
    - { path: ^/doc, roles: ROLE_USER, requires_channel: https }
    - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
    - { path: ^/card, roles: ROLE_ADMIN, requires_channel: https }
    - { path: ^/label, roles: ROLE_INSTRUCTOR, requires_channel: https }
    - { path: ^/markupset, roles: ROLE_INSTRUCTOR, requires_channel: https }
    - { path: ^/markup, roles: ROLE_INSTRUCTOR, requires_channel: https }
    - { path: ^/rubric, roles: ROLE_INSTRUCTOR, requires_channel: https }
    - { path: ^/comment, roles: ROLE_USER, requires_channel: https }
    - { path: ^/rating, roles: ROLE_USER, requires_channel: https }
    - { path: ^/stage, roles: ROLE_INSTRUCTOR, requires_channel: https }
    - { path: ^/term, roles: ROLE_ADMIN, requires_channel: https }


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon